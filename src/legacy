/*
  double fx(double *x) {
    return x[0] * x[0] + 4 * x[1] * x[1];
  }

  double grad_x1(double x) { return 2 * x; }
  double grad_x2(double x) { return 8 * x; }

  double x[] = {-4.0, -2.0};
*/

/*
  double fx(double *x) {
    return fabs(x[0] * x[0] * x[0] + 2 * x[0] * x[0] - 5 * x[0] + 6);
  }

  double x[] = {((double)rand())/((double)RAND_MAX+1.0) * (5 - (-5)) + (-5)};
*/

/*
  double fx(double *x, int dim) {
    return fabs(x[0] * x[0] * x[0] + 2 * x[0] * x[0] - 5 * x[0] + 6);
  }

  double grad_fx(double *x, int dim) {
    if ((x[0] * x[0] * x[0] + 2 * x[0] * x[0] - 5 * x[0] + 6) > 0) {
      return 3 * x[0] * x[0] * 4 * x[0] - 5;
    } else {
      return -1 * (3 * x[0] * x[0] * 4 * x[0] - 5);
    }
  }
*/

/* Sphere
  double fx(double *x, int dim) {
    double sum = 0;
    for (int i = 0; i < dim; i++) {
      sum += x[i] * x[i];
    }
    return sum;
  }

  double grad_fx(double *x, int dim) {
    return 2 * x[dim];
  }
*/

/* Rastrigin
  double fx(double *x, int dim) {
    double sum = 0;
    for (int i = 0; i < dim; i++) {
      sum += x[i] * x[i] - 10 * cos(2 * M_PI * x[i]) + 10;
    }
    return sum;
  }

  double grad_fx(double *x, int dim) {
    return 2 * x[dim] + 20 * M_PI * sin(2 * M_PI * x[dim]);
  }
*/

/*
  double h_params[] = {NAN};
  int params_n = sizeof(h_params) / sizeof(double);
  method mthd = newMethod(h_params, params_n, gradient_descent);
  double sub_h_params[] = {0, pow(10, 2), pow(10, -2), pow(10, -3)};
  int sub_params_n = sizeof(sub_h_params) / sizeof(double);
  method sub_mthd = newMethod(sub_h_params, sub_params_n, bisection_method);
  mthd.sub_mthd = &sub_mthd;
*/

/*
  double h_params[] = {0.01, 0};
  int params_n = sizeof(h_params) / sizeof(double);
  method mthd = newMethod(h_params, params_n, liner_method);
*/

/*
  double h_params[] = {0, 1};
  int params_n = sizeof(h_params) / sizeof(double);
  method mthd = newMethod(h_params, params_n, hill_climbing);
*/

/*
  double h_params[] = {1, pow(10, -5), 10, 0.9, 0, 0, 1, pow(10, -10), 0.6, 10000};
  int params_n = sizeof(h_params) / sizeof(double);
  method mthd = newMethod(h_params, params_n, simulated_annealing);
*/
